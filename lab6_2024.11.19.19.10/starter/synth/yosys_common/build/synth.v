/* Generated by Yosys 0.47+86 (git sha1 b89bd027a, clang++ 18.1.8 -fPIC -O3) */

module basys3_7seg_driver(clk_1k_i, rst_ni, digit0_en_i, digit0_i, digit1_en_i, digit1_i, digit2_en_i, digit2_i, digit3_en_i, digit3_i, anode_o, segments_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _sv2v_0;
  output [3:0] anode_o;
  wire [3:0] anode_o;
  input clk_1k_i;
  wire clk_1k_i;
  wire [1:0] counter_d;
  wire [1:0] counter_q;
  wire [3:0] current_digit;
  wire [6:0] decoded_segments;
  input digit0_en_i;
  wire digit0_en_i;
  input [3:0] digit0_i;
  wire [3:0] digit0_i;
  input digit1_en_i;
  wire digit1_en_i;
  input [3:0] digit1_i;
  wire [3:0] digit1_i;
  input digit2_en_i;
  wire digit2_en_i;
  input [3:0] digit2_i;
  wire [3:0] digit2_i;
  input digit3_en_i;
  wire digit3_en_i;
  input [3:0] digit3_i;
  wire [3:0] digit3_i;
  input rst_ni;
  wire rst_ni;
  wire segments_en;
  output [6:0] segments_o;
  wire [6:0] segments_o;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd2)
  ) _13_ (
    .A(counter_q),
    .B(1'h1),
    .Y(counter_d)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(2'h0),
    .WIDTH(32'd2)
  ) _14_ (
    .CLK(clk_1k_i),
    .D(counter_d),
    .Q(counter_q),
    .SRST(rst_ni)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _15_ (
    .A({ _12_, _11_, _09_ }),
    .Y(_00_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _16_ (
    .A({ _12_, _10_, _09_ }),
    .Y(_01_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _17_ (
    .A({ _11_, _10_, _09_ }),
    .Y(_02_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _18_ (
    .A({ _12_, _11_, _10_ }),
    .Y(_03_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd7),
    .Y_WIDTH(32'd7)
  ) _19_ (
    .A(decoded_segments),
    .Y(_04_[6:0])
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _20_ (
    .A(digit0_en_i),
    .Y(_05_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _21_ (
    .A(digit1_en_i),
    .Y(_06_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _22_ (
    .A(digit2_en_i),
    .Y(_07_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _23_ (
    .A(digit3_en_i),
    .Y(_08_)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _24_ (
    .A(1'hx),
    .B({ _07_, 1'h1 }),
    .S({ _10_, _00_ }),
    .Y(anode_o[2])
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _25_ (
    .A(counter_q),
    .B(2'h3),
    .Y(_09_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _26_ (
    .A(counter_q),
    .B(2'h2),
    .Y(_10_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _27_ (
    .A(counter_q),
    .B(1'h1),
    .Y(_11_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _28_ (
    .A(counter_q),
    .Y(_12_)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _29_ (
    .A(1'hx),
    .B({ _06_, 1'h1 }),
    .S({ _11_, _01_ }),
    .Y(anode_o[1])
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _30_ (
    .A(1'hx),
    .B({ 1'h1, _08_ }),
    .S({ _03_, _09_ }),
    .Y(anode_o[3])
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) _31_ (
    .A(1'hx),
    .B({ digit0_en_i, digit1_en_i, digit2_en_i, digit3_en_i }),
    .S({ _12_, _11_, _10_, _09_ }),
    .Y(segments_en)
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd4)
  ) _32_ (
    .A(4'hx),
    .B({ digit0_i, digit1_i, digit2_i, digit3_i }),
    .S({ _12_, _11_, _10_, _09_ }),
    .Y(current_digit)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _33_ (
    .A(1'hx),
    .B({ _05_, 1'h1 }),
    .S({ _12_, _02_ }),
    .Y(anode_o[0])
  );
  \$mux  #(
    .WIDTH(32'd7)
  ) _34_ (
    .A(7'h7f),
    .B(_04_[6:0]),
    .S(segments_en),
    .Y(segments_o)
  );
  hex7seg hex7seg (
    .A(decoded_segments[0]),
    .B(decoded_segments[1]),
    .C(decoded_segments[2]),
    .D(decoded_segments[3]),
    .E(decoded_segments[4]),
    .F(decoded_segments[5]),
    .G(decoded_segments[6]),
    .d0(current_digit[0]),
    .d1(current_digit[1]),
    .d2(current_digit[2]),
    .d3(current_digit[3])
  );
  assign _sv2v_0 = 1'h0;
endmodule

module bird(clk_i, rst_ni, next_frame_i, spawn_i, rand_i, pixel_x_i, pixel_y_i, pixel_o);
  wire [7:0] _00_;
  wire [10:0] _01_;
  wire _02_;
  wire [10:0] _03_;
  wire [10:0] _04_;
  wire [7:0] _05_;
  wire [11:0] _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [31:0] _12_;
  wire [31:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [20:0] _20_;
  wire [20:0] _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire [31:0] _29_;
  wire [31:0] _30_;
  wire [31:0] _31_;
  wire _sv2v_0;
  wire [7:0] bird_flap_counter_q;
  wire bird_flap_up_q;
  wire [10:0] bird_x_q;
  wire [10:0] bird_y_q;
  input clk_i;
  wire clk_i;
  input next_frame_i;
  wire next_frame_i;
  wire off_screen;
  wire pixel_in_range;
  output pixel_o;
  wire pixel_o;
  input [9:0] pixel_x_i;
  wire [9:0] pixel_x_i;
  wire pixel_x_in_range;
  input [9:0] pixel_y_i;
  wire [9:0] pixel_y_i;
  wire pixel_y_in_range;
  input [1:0] rand_i;
  wire [1:0] rand_i;
  wire [9:0] rom_x;
  wire [9:0] rom_y;
  input rst_ni;
  wire rst_ni;
  input spawn_i;
  wire spawn_i;
  reg [20:0] BIRD_DOWN [17:0];
  initial begin
    BIRD_DOWN[0] = 21'h000000;
    BIRD_DOWN[1] = 21'h000000;
    BIRD_DOWN[2] = 21'h000000;
    BIRD_DOWN[3] = 21'h018000;
    BIRD_DOWN[4] = 21'h038000;
    BIRD_DOWN[5] = 21'h07c000;
    BIRD_DOWN[6] = 21'h0fc000;
    BIRD_DOWN[7] = 21'h1fff80;
    BIRD_DOWN[8] = 21'h007fc0;
    BIRD_DOWN[9] = 21'h003fff;
    BIRD_DOWN[10] = 21'h001ff8;
    BIRD_DOWN[11] = 21'h001ffe;
    BIRD_DOWN[12] = 21'h001ff0;
    BIRD_DOWN[13] = 21'h001e00;
    BIRD_DOWN[14] = 21'h001c00;
    BIRD_DOWN[15] = 21'h001800;
    BIRD_DOWN[16] = 21'h001800;
    BIRD_DOWN[17] = 21'h001000;
  end
  assign _20_ = BIRD_DOWN[rom_y[4:0]];
  reg [20:0] BIRD_UP [17:0];
  initial begin
    BIRD_UP[0] = 21'h002000;
    BIRD_UP[1] = 21'h003000;
    BIRD_UP[2] = 21'h003800;
    BIRD_UP[3] = 21'h019c00;
    BIRD_UP[4] = 21'h039e00;
    BIRD_UP[5] = 21'h07df00;
    BIRD_UP[6] = 21'h0fdf80;
    BIRD_UP[7] = 21'h1fff80;
    BIRD_UP[8] = 21'h007fc0;
    BIRD_UP[9] = 21'h003fff;
    BIRD_UP[10] = 21'h001ff8;
    BIRD_UP[11] = 21'h000ffe;
    BIRD_UP[12] = 21'h0007f0;
    BIRD_UP[13] = 21'h000000;
    BIRD_UP[14] = 21'h000000;
    BIRD_UP[15] = 21'h000000;
    BIRD_UP[16] = 21'h000000;
    BIRD_UP[17] = 21'h000000;
  end
  assign _21_ = BIRD_UP[rom_y[4:0]];
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd8)
  ) _32_ (
    .A(bird_flap_counter_q),
    .B(1'h1),
    .Y(_05_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd12)
  ) _33_ (
    .A(bird_x_q),
    .B(6'h2a),
    .Y(_06_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd12)
  ) _34_ (
    .A(bird_y_q),
    .B(6'h24),
    .Y(_07_[11:0])
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(1'h0),
    .WIDTH(32'd1)
  ) bird_flap_up_q_reg /* _35_ */ (
    .CLK(clk_i),
    .D(_17_),
    .EN(_09_),
    .Q(bird_flap_up_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(8'h00),
    .WIDTH(32'd8)
  ) _36_ (
    .CLK(clk_i),
    .D(_00_),
    .EN(next_frame_i),
    .Q(bird_flap_counter_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(11'h000),
    .WIDTH(32'd11)
  ) _37_ (
    .CLK(clk_i),
    .D(_04_),
    .EN(_10_),
    .Q(bird_y_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(11'h7d6),
    .WIDTH(32'd11)
  ) _38_ (
    .CLK(clk_i),
    .D(_01_),
    .EN(_11_),
    .Q(bird_x_q),
    .SRST(rst_ni)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _39_ (
    .A({ off_screen, spawn_i }),
    .B(2'h2),
    .Y(_08_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _40_ (
    .A({ _14_, next_frame_i }),
    .Y(_09_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _41_ (
    .A({ off_screen, spawn_i, next_frame_i }),
    .Y(_10_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _42_ (
    .A({ _08_, next_frame_i }),
    .Y(_11_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _43_ (
    .A(bird_flap_counter_q),
    .B(3'h7),
    .Y(_14_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) _44_ (
    .A(pixel_x_i),
    .B(bird_x_q),
    .Y(_15_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) _45_ (
    .A(pixel_y_i),
    .B(bird_y_q),
    .Y(_16_)
  );
  \$le  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) _46_ (
    .A(bird_x_q),
    .B(7'h56),
    .Y(off_screen)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _47_ (
    .A(_15_),
    .B(_18_),
    .Y(pixel_x_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _48_ (
    .A(_16_),
    .B(_19_),
    .Y(pixel_y_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _49_ (
    .A(pixel_x_in_range),
    .B(pixel_y_in_range),
    .Y(pixel_in_range)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _50_ (
    .A(bird_flap_up_q),
    .Y(_17_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) _51_ (
    .A(pixel_x_i),
    .B(_06_),
    .Y(_18_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) _52_ (
    .A(pixel_y_i),
    .B(_07_[11:0]),
    .Y(_19_)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _53_ (
    .A(1'hx),
    .B({ _27_, _28_ }),
    .S({ _22_, bird_flap_up_q }),
    .Y(_02_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _54_ (
    .A(bird_flap_up_q),
    .Y(_22_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _55_ (
    .A(1'h0),
    .B(_02_),
    .S(pixel_in_range),
    .Y(pixel_o)
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd11)
  ) _56_ (
    .A(11'hxxx),
    .B(44'h2a450495112),
    .S({ _26_, _25_, _24_, _23_ }),
    .Y(_04_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _57_ (
    .A(rand_i),
    .B(2'h3),
    .Y(_23_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _58_ (
    .A(rand_i),
    .B(2'h2),
    .Y(_24_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _59_ (
    .A(rand_i),
    .B(1'h1),
    .Y(_25_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _60_ (
    .A(rand_i),
    .Y(_26_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _61_ (
    .A(11'hxxx),
    .B(11'h280),
    .S(spawn_i),
    .Y(_03_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _62_ (
    .A(_29_[10:0]),
    .B(_03_),
    .S(off_screen),
    .Y(_01_)
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _63_ (
    .A(_05_),
    .B(8'h00),
    .S(_14_),
    .Y(_00_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd21),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _64_ (
    .A(_20_),
    .B(rom_x),
    .Y(_27_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd21),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _65_ (
    .A(_21_),
    .B(rom_x),
    .Y(_28_)
  );
  \$sub  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd11)
  ) _66_ (
    .A(bird_x_q),
    .B(5'h08),
    .Y(_29_[10:0])
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd12)
  ) _67_ (
    .A(pixel_x_i),
    .B(bird_x_q),
    .Y({ _12_[30], _12_[9:0], _30_[0] })
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd10)
  ) _68_ (
    .A(5'h14),
    .B(_12_[9:0]),
    .Y(rom_x)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd12)
  ) _69_ (
    .A(pixel_y_i),
    .B(bird_y_q),
    .Y({ _13_[30], rom_y, _31_[0] })
  );
  assign _07_[31:12] = 20'h00000;
  assign _12_[29:10] = { _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30] };
  assign _12_[31] = 1'h0;
  assign _13_[29:0] = { _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], rom_y };
  assign _13_[31] = 1'h0;
  assign _30_[31:1] = { _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[30], _12_[9:0] };
  assign _31_[31:1] = { _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], _13_[30], rom_y };
  assign _sv2v_0 = 1'h0;
endmodule

module cactus(clk_i, rst_ni, next_frame_i, spawn_i, rand_i, pixel_x_i, pixel_y_i, pixel_o);
  wire [10:0] _00_;
  wire _01_;
  wire [10:0] _02_;
  wire [11:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [14:0] _13_;
  wire [14:0] _14_;
  wire [14:0] _15_;
  wire [14:0] _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [31:0] _25_;
  wire [31:0] _26_;
  wire _sv2v_0;
  wire [1:0] cactus_image_q;
  wire [10:0] cactus_x_q;
  input clk_i;
  wire clk_i;
  input next_frame_i;
  wire next_frame_i;
  wire off_screen;
  wire pixel_in_range;
  output pixel_o;
  wire pixel_o;
  input [9:0] pixel_x_i;
  wire [9:0] pixel_x_i;
  wire pixel_x_in_range;
  input [9:0] pixel_y_i;
  wire [9:0] pixel_y_i;
  wire pixel_y_in_range;
  input [1:0] rand_i;
  wire [1:0] rand_i;
  wire [9:0] rom_x;
  wire [9:0] rom_y;
  input rst_ni;
  wire rst_ni;
  input spawn_i;
  wire spawn_i;
  reg [14:0] CACTUS0 [32:0];
  initial begin
    CACTUS0[0] = 15'h01c0;
    CACTUS0[1] = 15'h03e0;
    CACTUS0[2] = 15'h03e0;
    CACTUS0[3] = 15'h23e0;
    CACTUS0[4] = 15'h73e2;
    CACTUS0[5] = 15'h73e7;
    CACTUS0[6] = 15'h73e7;
    CACTUS0[7] = 15'h73e7;
    CACTUS0[8] = 15'h73e7;
    CACTUS0[9] = 15'h73e7;
    CACTUS0[10] = 15'h73e7;
    CACTUS0[11] = 15'h73e7;
    CACTUS0[12] = 15'h73e7;
    CACTUS0[13] = 15'h73e7;
    CACTUS0[14] = 15'h73e7;
    CACTUS0[15] = 15'h7fe7;
    CACTUS0[16] = 15'h3fe7;
    CACTUS0[17] = 15'h1fff;
    CACTUS0[18] = 15'h03fe;
    CACTUS0[19] = 15'h03fc;
    CACTUS0[20] = 15'h03e0;
    CACTUS0[21] = 15'h03e0;
    CACTUS0[22] = 15'h03e0;
    CACTUS0[23] = 15'h03e0;
    CACTUS0[24] = 15'h03e0;
    CACTUS0[25] = 15'h03e0;
    CACTUS0[26] = 15'h03e0;
    CACTUS0[27] = 15'h03e0;
    CACTUS0[28] = 15'h03e0;
    CACTUS0[29] = 15'h03e0;
    CACTUS0[30] = 15'h03e0;
    CACTUS0[31] = 15'h03e0;
    CACTUS0[32] = 15'h03e0;
  end
  assign _13_ = CACTUS0[rom_y[5:0]];
  reg [14:0] CACTUS1 [32:0];
  initial begin
    CACTUS1[0] = 15'h01c0;
    CACTUS1[1] = 15'h03e0;
    CACTUS1[2] = 15'h03e0;
    CACTUS1[3] = 15'h23e0;
    CACTUS1[4] = 15'h73e0;
    CACTUS1[5] = 15'h73e0;
    CACTUS1[6] = 15'h73e0;
    CACTUS1[7] = 15'h73e2;
    CACTUS1[8] = 15'h73e7;
    CACTUS1[9] = 15'h73e7;
    CACTUS1[10] = 15'h73e7;
    CACTUS1[11] = 15'h73e7;
    CACTUS1[12] = 15'h73e7;
    CACTUS1[13] = 15'h73e7;
    CACTUS1[14] = 15'h73e7;
    CACTUS1[15] = 15'h73e7;
    CACTUS1[16] = 15'h73e7;
    CACTUS1[17] = 15'h73e7;
    CACTUS1[18] = 15'h73e7;
    CACTUS1[19] = 15'h73e7;
    CACTUS1[20] = 15'h3fe7;
    CACTUS1[21] = 15'h1fe7;
    CACTUS1[22] = 15'h0fff;
    CACTUS1[23] = 15'h03fe;
    CACTUS1[24] = 15'h03fc;
    CACTUS1[25] = 15'h03e0;
    CACTUS1[26] = 15'h03e0;
    CACTUS1[27] = 15'h03e0;
    CACTUS1[28] = 15'h03e0;
    CACTUS1[29] = 15'h03e0;
    CACTUS1[30] = 15'h03e0;
    CACTUS1[31] = 15'h03e0;
    CACTUS1[32] = 15'h03e0;
  end
  assign _14_ = CACTUS1[rom_y[5:0]];
  reg [14:0] CACTUS2 [32:0];
  initial begin
    CACTUS2[0] = 15'h01c0;
    CACTUS2[1] = 15'h03e0;
    CACTUS2[2] = 15'h03e0;
    CACTUS2[3] = 15'h03e0;
    CACTUS2[4] = 15'h03e2;
    CACTUS2[5] = 15'h03e7;
    CACTUS2[6] = 15'h03e7;
    CACTUS2[7] = 15'h03e7;
    CACTUS2[8] = 15'h23e7;
    CACTUS2[9] = 15'h73e7;
    CACTUS2[10] = 15'h73e7;
    CACTUS2[11] = 15'h73e7;
    CACTUS2[12] = 15'h73e7;
    CACTUS2[13] = 15'h73e7;
    CACTUS2[14] = 15'h73e7;
    CACTUS2[15] = 15'h73ff;
    CACTUS2[16] = 15'h73fe;
    CACTUS2[17] = 15'h73fc;
    CACTUS2[18] = 15'h73e0;
    CACTUS2[19] = 15'h7fe0;
    CACTUS2[20] = 15'h3fe0;
    CACTUS2[21] = 15'h1fe0;
    CACTUS2[22] = 15'h03e0;
    CACTUS2[23] = 15'h03e0;
    CACTUS2[24] = 15'h03e0;
    CACTUS2[25] = 15'h03e0;
    CACTUS2[26] = 15'h03e0;
    CACTUS2[27] = 15'h03e0;
    CACTUS2[28] = 15'h03e0;
    CACTUS2[29] = 15'h03e0;
    CACTUS2[30] = 15'h03e0;
    CACTUS2[31] = 15'h03e0;
    CACTUS2[32] = 15'h03e0;
  end
  assign _15_ = CACTUS2[rom_y[5:0]];
  reg [14:0] CACTUS3 [32:0];
  initial begin
    CACTUS3[0] = 15'h01c0;
    CACTUS3[1] = 15'h03e0;
    CACTUS3[2] = 15'h03e0;
    CACTUS3[3] = 15'h03e0;
    CACTUS3[4] = 15'h33e2;
    CACTUS3[5] = 15'h7be7;
    CACTUS3[6] = 15'h7be7;
    CACTUS3[7] = 15'h7be7;
    CACTUS3[8] = 15'h7be7;
    CACTUS3[9] = 15'h7be7;
    CACTUS3[10] = 15'h7be7;
    CACTUS3[11] = 15'h7be7;
    CACTUS3[12] = 15'h7fe7;
    CACTUS3[13] = 15'h7fe7;
    CACTUS3[14] = 15'h3fe7;
    CACTUS3[15] = 15'h1fe7;
    CACTUS3[16] = 15'h03e7;
    CACTUS3[17] = 15'h03ff;
    CACTUS3[18] = 15'h03fe;
    CACTUS3[19] = 15'h03fc;
    CACTUS3[20] = 15'h03e0;
    CACTUS3[21] = 15'h03e0;
    CACTUS3[22] = 15'h03e0;
    CACTUS3[23] = 15'h03e0;
    CACTUS3[24] = 15'h03e0;
    CACTUS3[25] = 15'h03e0;
    CACTUS3[26] = 15'h03e0;
    CACTUS3[27] = 15'h03e0;
    CACTUS3[28] = 15'h03e0;
    CACTUS3[29] = 15'h03e0;
    CACTUS3[30] = 15'h03e0;
    CACTUS3[31] = 15'h03e0;
    CACTUS3[32] = 15'h03e0;
  end
  assign _16_ = CACTUS3[rom_y[5:0]];
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd12)
  ) _27_ (
    .A(cactus_x_q),
    .B(5'h1e),
    .Y(_03_)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(2'h0),
    .WIDTH(32'd2)
  ) _28_ (
    .CLK(clk_i),
    .D(rand_i),
    .EN(_05_),
    .Q(cactus_image_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(11'h7e2),
    .WIDTH(32'd11)
  ) _29_ (
    .CLK(clk_i),
    .D(_00_),
    .EN(_06_),
    .Q(cactus_x_q),
    .SRST(rst_ni)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _30_ (
    .A({ off_screen, spawn_i }),
    .B(2'h2),
    .Y(_04_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _31_ (
    .A({ off_screen, spawn_i, next_frame_i }),
    .Y(_05_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _32_ (
    .A({ _04_, next_frame_i }),
    .Y(_06_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) _33_ (
    .A(pixel_x_i),
    .B(cactus_x_q),
    .Y(_09_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) _34_ (
    .A(pixel_y_i),
    .B(9'h14e),
    .Y(_10_)
  );
  \$le  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) _35_ (
    .A(cactus_x_q),
    .B(6'h22),
    .Y(off_screen)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _36_ (
    .A(_09_),
    .B(_11_),
    .Y(pixel_x_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _37_ (
    .A(_10_),
    .B(_12_),
    .Y(pixel_y_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _38_ (
    .A(pixel_x_in_range),
    .B(pixel_y_in_range),
    .Y(pixel_in_range)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) _39_ (
    .A(pixel_x_i),
    .B(_03_),
    .Y(_11_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) _40_ (
    .A(pixel_y_i),
    .B(9'h190),
    .Y(_12_)
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd1)
  ) _41_ (
    .A(1'hx),
    .B({ _21_, _22_, _23_, _24_ }),
    .S({ _20_, _19_, _18_, _17_ }),
    .Y(_01_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _42_ (
    .A(cactus_image_q),
    .B(2'h3),
    .Y(_17_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _43_ (
    .A(cactus_image_q),
    .B(2'h2),
    .Y(_18_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _44_ (
    .A(cactus_image_q),
    .B(1'h1),
    .Y(_19_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _45_ (
    .A(cactus_image_q),
    .Y(_20_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _46_ (
    .A(1'h0),
    .B(_01_),
    .S(pixel_in_range),
    .Y(pixel_o)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _47_ (
    .A(11'hxxx),
    .B(11'h280),
    .S(spawn_i),
    .Y(_02_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _48_ (
    .A(_07_[10:0]),
    .B(_02_),
    .S(off_screen),
    .Y(_00_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _49_ (
    .A(_13_),
    .B(rom_x),
    .Y(_21_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _50_ (
    .A(_14_),
    .B(rom_x),
    .Y(_22_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _51_ (
    .A(_15_),
    .B(rom_x),
    .Y(_23_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd15),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _52_ (
    .A(_16_),
    .B(rom_x),
    .Y(_24_)
  );
  \$sub  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd11)
  ) _53_ (
    .A(cactus_x_q),
    .B(5'h08),
    .Y(_07_[10:0])
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd12)
  ) _54_ (
    .A(pixel_x_i),
    .B(cactus_x_q),
    .Y({ _08_[30], _08_[9:0], _25_[0] })
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd10)
  ) _55_ (
    .A(4'he),
    .B(_08_[9:0]),
    .Y(rom_x)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd11)
  ) _56_ (
    .A(pixel_y_i),
    .B(9'h14e),
    .Y({ rom_y, _26_[0] })
  );
  assign _08_[29:10] = { _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30] };
  assign _08_[31] = 1'h0;
  assign _25_[31:1] = { _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[30], _08_[9:0] };
  assign _26_[31:1] = { rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y[9], rom_y };
  assign _sv2v_0 = 1'h0;
endmodule

module clk_100M_to_clk_1k(clk_100M_i, clk_1k_o);
  wire [17:0] _0_;
  wire _1_;
  input clk_100M_i;
  wire clk_100M_i;
  output clk_1k_o;
  wire clk_1k_o;
  wire clk_d;
  wire clk_q;
  wire [17:0] counter_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd18)
  ) _2_ (
    .A(counter_q),
    .B(1'h1),
    .Y(_0_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(18'h00000),
    .WIDTH(32'd18)
  ) _3_ (
    .CLK(clk_100M_i),
    .D(_0_),
    .Q(counter_q),
    .SRST(_1_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd17),
    .Y_WIDTH(32'd1)
  ) _4_ (
    .A(counter_q),
    .B(17'h1869f),
    .Y(_1_)
  );
  \$gt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd18),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) _5_ (
    .A(counter_q),
    .B(16'hc350),
    .Y(clk_d)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_q_reg /* _6_ */ (
    .CLK(clk_100M_i),
    .D(clk_d),
    .Q(clk_q)
  );
  assign clk_1k_o = clk_q;
endmodule

module dino(clk_i, rst_ni, next_frame_i, up_i, down_i, hit_i, pixel_x_i, pixel_y_i, pixel_o);
  wire [10:0] _00_;
  wire [10:0] _01_;
  wire _02_;
  wire [10:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [7:0] _08_;
  wire [10:0] _09_;
  wire [10:0] _10_;
  wire [31:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [31:0] _15_;
  wire [31:0] _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [57:0] _25_;
  wire [57:0] _26_;
  wire [57:0] _27_;
  wire [57:0] _28_;
  wire [57:0] _29_;
  wire [57:0] _30_;
  wire [10:0] _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire [31:0] _38_;
  wire _sv2v_0;
  input clk_i;
  wire clk_i;
  wire dino_left_q;
  wire [7:0] dino_step_counter_d;
  wire [7:0] dino_step_counter_q;
  wire [10:0] dino_yp_q;
  wire [10:0] dino_yv_q;
  input down_i;
  wire down_i;
  wire grounded;
  input hit_i;
  wire hit_i;
  input next_frame_i;
  wire next_frame_i;
  wire pixel_in_range;
  output pixel_o;
  wire pixel_o;
  input [9:0] pixel_x_i;
  wire [9:0] pixel_x_i;
  wire pixel_x_in_range;
  input [9:0] pixel_y_i;
  wire [9:0] pixel_y_i;
  wire pixel_y_in_range;
  wire [9:0] rom_x;
  wire [9:0] rom_y;
  input rst_ni;
  wire rst_ni;
  input up_i;
  wire up_i;
  reg [57:0] DINO_DOWNLEFT [42:0];
  initial begin
    DINO_DOWNLEFT[0] = 58'h000000000000000;
    DINO_DOWNLEFT[1] = 58'h000000000000000;
    DINO_DOWNLEFT[2] = 58'h000000000000000;
    DINO_DOWNLEFT[3] = 58'h000000000000000;
    DINO_DOWNLEFT[4] = 58'h000000000000000;
    DINO_DOWNLEFT[5] = 58'h000000000000000;
    DINO_DOWNLEFT[6] = 58'h000000000000000;
    DINO_DOWNLEFT[7] = 58'h000000000000000;
    DINO_DOWNLEFT[8] = 58'h000000000000000;
    DINO_DOWNLEFT[9] = 58'h000000000000000;
    DINO_DOWNLEFT[10] = 58'h000000000000000;
    DINO_DOWNLEFT[11] = 58'h000000000000000;
    DINO_DOWNLEFT[12] = 58'h000000000000000;
    DINO_DOWNLEFT[13] = 58'h000000000000000;
    DINO_DOWNLEFT[14] = 58'h000000000000000;
    DINO_DOWNLEFT[15] = 58'h000000000000000;
    DINO_DOWNLEFT[16] = 58'h000000000000000;
    DINO_DOWNLEFT[17] = 58'h060000000000000;
    DINO_DOWNLEFT[18] = 58'h06000000003fffc;
    DINO_DOWNLEFT[19] = 58'h07e01ffff03fffc;
    DINO_DOWNLEFT[20] = 58'h07e01ffff0fffff;
    DINO_DOWNLEFT[21] = 58'h07fffffffff3fff;
    DINO_DOWNLEFT[22] = 58'h07fffffffff3fff;
    DINO_DOWNLEFT[23] = 58'h01fffffffffffff;
    DINO_DOWNLEFT[24] = 58'h01fffffffffffff;
    DINO_DOWNLEFT[25] = 58'h007ffffffffffff;
    DINO_DOWNLEFT[26] = 58'h007ffffffffffff;
    DINO_DOWNLEFT[27] = 58'h001ffffffffffff;
    DINO_DOWNLEFT[28] = 58'h001ffffffffffff;
    DINO_DOWNLEFT[29] = 58'h0007ffffffffc00;
    DINO_DOWNLEFT[30] = 58'h0007ffffffffc00;
    DINO_DOWNLEFT[31] = 58'h0001fffffc3fff0;
    DINO_DOWNLEFT[32] = 58'h0001fffffc3fff0;
    DINO_DOWNLEFT[33] = 58'h00007ffffc00000;
    DINO_DOWNLEFT[34] = 58'h00007ff83000000;
    DINO_DOWNLEFT[35] = 58'h0000c3f03000000;
    DINO_DOWNLEFT[36] = 58'h0000c3f03c00000;
    DINO_DOWNLEFT[37] = 58'h0000f3c03c00000;
    DINO_DOWNLEFT[38] = 58'h0000f3c00000000;
    DINO_DOWNLEFT[39] = 58'h000003000000000;
    DINO_DOWNLEFT[40] = 58'h000003000000000;
    DINO_DOWNLEFT[41] = 58'h000003c00000000;
    DINO_DOWNLEFT[42] = 58'h000003c00000000;
  end
  assign _25_ = DINO_DOWNLEFT[rom_y[5:0]];
  reg [57:0] DINO_DOWNRIGHT [42:0];
  initial begin
    DINO_DOWNRIGHT[0] = 58'h000000000000000;
    DINO_DOWNRIGHT[1] = 58'h000000000000000;
    DINO_DOWNRIGHT[2] = 58'h000000000000000;
    DINO_DOWNRIGHT[3] = 58'h000000000000000;
    DINO_DOWNRIGHT[4] = 58'h000000000000000;
    DINO_DOWNRIGHT[5] = 58'h000000000000000;
    DINO_DOWNRIGHT[6] = 58'h000000000000000;
    DINO_DOWNRIGHT[7] = 58'h000000000000000;
    DINO_DOWNRIGHT[8] = 58'h000000000000000;
    DINO_DOWNRIGHT[9] = 58'h000000000000000;
    DINO_DOWNRIGHT[10] = 58'h000000000000000;
    DINO_DOWNRIGHT[11] = 58'h000000000000000;
    DINO_DOWNRIGHT[12] = 58'h000000000000000;
    DINO_DOWNRIGHT[13] = 58'h000000000000000;
    DINO_DOWNRIGHT[14] = 58'h000000000000000;
    DINO_DOWNRIGHT[15] = 58'h000000000000000;
    DINO_DOWNRIGHT[16] = 58'h000000000000000;
    DINO_DOWNRIGHT[17] = 58'h060000000000000;
    DINO_DOWNRIGHT[18] = 58'h06000000003fffc;
    DINO_DOWNRIGHT[19] = 58'h07e01ffff03fffc;
    DINO_DOWNRIGHT[20] = 58'h07e01ffff0fffff;
    DINO_DOWNRIGHT[21] = 58'h07fffffffff3fff;
    DINO_DOWNRIGHT[22] = 58'h07fffffffff3fff;
    DINO_DOWNRIGHT[23] = 58'h01fffffffffffff;
    DINO_DOWNRIGHT[24] = 58'h01fffffffffffff;
    DINO_DOWNRIGHT[25] = 58'h007ffffffffffff;
    DINO_DOWNRIGHT[26] = 58'h007ffffffffffff;
    DINO_DOWNRIGHT[27] = 58'h001ffffffffffff;
    DINO_DOWNRIGHT[28] = 58'h001ffffffffffff;
    DINO_DOWNRIGHT[29] = 58'h0007ffffffffc00;
    DINO_DOWNRIGHT[30] = 58'h0007ffffffffc00;
    DINO_DOWNRIGHT[31] = 58'h0001fffffc3fff0;
    DINO_DOWNRIGHT[32] = 58'h0001fffffc3fff0;
    DINO_DOWNRIGHT[33] = 58'h00007ffffc00000;
    DINO_DOWNRIGHT[34] = 58'h00007ff83000000;
    DINO_DOWNRIGHT[35] = 58'h0000fc3e3000000;
    DINO_DOWNRIGHT[36] = 58'h0000fc3e3c00000;
    DINO_DOWNRIGHT[37] = 58'h0000f0003c00000;
    DINO_DOWNRIGHT[38] = 58'h0000f0000000000;
    DINO_DOWNRIGHT[39] = 58'h0000c0000000000;
    DINO_DOWNRIGHT[40] = 58'h0000c0000000000;
    DINO_DOWNRIGHT[41] = 58'h0000f0000000000;
    DINO_DOWNRIGHT[42] = 58'h0000f0000000000;
  end
  assign _26_ = DINO_DOWNRIGHT[rom_y[5:0]];
  reg [57:0] DINO_HIT [42:0];
  initial begin
    DINO_HIT[0] = 58'h000000ffff00000;
    DINO_HIT[1] = 58'h000000ffff00000;
    DINO_HIT[2] = 58'h000003ffffc0000;
    DINO_HIT[3] = 58'h000003c3ffc0000;
    DINO_HIT[4] = 58'h000003dbffc0000;
    DINO_HIT[5] = 58'h000003dbffc0000;
    DINO_HIT[6] = 58'h000003c3ffc0000;
    DINO_HIT[7] = 58'h000003ffffc0000;
    DINO_HIT[8] = 58'h000003ffffc0000;
    DINO_HIT[9] = 58'h000003ffffc0000;
    DINO_HIT[10] = 58'h000003ffffc0000;
    DINO_HIT[11] = 58'h000003ffffc0000;
    DINO_HIT[12] = 58'h000003ffffc0000;
    DINO_HIT[13] = 58'h000003fffc00000;
    DINO_HIT[14] = 58'h000003fffc00000;
    DINO_HIT[15] = 58'h30000ffc0000000;
    DINO_HIT[16] = 58'h30000ffc0000000;
    DINO_HIT[17] = 58'h30007ffc0000000;
    DINO_HIT[18] = 58'h30007ffc0000000;
    DINO_HIT[19] = 58'h3c03ffffc000000;
    DINO_HIT[20] = 58'h3c03ffffc000000;
    DINO_HIT[21] = 58'h3f0ffffcc000000;
    DINO_HIT[22] = 58'h3f0ffffcc000000;
    DINO_HIT[23] = 58'h3ffffffc0000000;
    DINO_HIT[24] = 58'h3ffffffc0000000;
    DINO_HIT[25] = 58'h3ffffffc0000000;
    DINO_HIT[26] = 58'h3ffffffc0000000;
    DINO_HIT[27] = 58'h0ffffffc0000000;
    DINO_HIT[28] = 58'h0ffffff00000000;
    DINO_HIT[29] = 58'h03fffff00000000;
    DINO_HIT[30] = 58'h03fffff00000000;
    DINO_HIT[31] = 58'h00ffffc00000000;
    DINO_HIT[32] = 58'h00ffffc00000000;
    DINO_HIT[33] = 58'h003fff000000000;
    DINO_HIT[34] = 58'h003fff000000000;
    DINO_HIT[35] = 58'h000fcf000000000;
    DINO_HIT[36] = 58'h000fcf000000000;
    DINO_HIT[37] = 58'h000f03000000000;
    DINO_HIT[38] = 58'h000f03000000000;
    DINO_HIT[39] = 58'h000c03000000000;
    DINO_HIT[40] = 58'h000c03000000000;
    DINO_HIT[41] = 58'h000f03c00000000;
    DINO_HIT[42] = 58'h000f03c00000000;
  end
  assign _27_ = DINO_HIT[rom_y[5:0]];
  reg [57:0] DINO_LEFT [42:0];
  initial begin
    DINO_LEFT[0] = 58'h000000ffff00000;
    DINO_LEFT[1] = 58'h000000ffff00000;
    DINO_LEFT[2] = 58'h000003ffffc0000;
    DINO_LEFT[3] = 58'h000003cfffc0000;
    DINO_LEFT[4] = 58'h000003cfffc0000;
    DINO_LEFT[5] = 58'h000003ffffc0000;
    DINO_LEFT[6] = 58'h000003ffffc0000;
    DINO_LEFT[7] = 58'h000003ffffc0000;
    DINO_LEFT[8] = 58'h000003ffffc0000;
    DINO_LEFT[9] = 58'h000003ffffc0000;
    DINO_LEFT[10] = 58'h000003ffffc0000;
    DINO_LEFT[11] = 58'h000003ff0000000;
    DINO_LEFT[12] = 58'h000003ff0000000;
    DINO_LEFT[13] = 58'h000003fffc00000;
    DINO_LEFT[14] = 58'h000003fffc00000;
    DINO_LEFT[15] = 58'h30000ffc0000000;
    DINO_LEFT[16] = 58'h30000ffc0000000;
    DINO_LEFT[17] = 58'h30007ffc0000000;
    DINO_LEFT[18] = 58'h30007ffc0000000;
    DINO_LEFT[19] = 58'h3c03ffffc000000;
    DINO_LEFT[20] = 58'h3c03ffffc000000;
    DINO_LEFT[21] = 58'h3f0ffffcc000000;
    DINO_LEFT[22] = 58'h3f0ffffcc000000;
    DINO_LEFT[23] = 58'h3ffffffc0000000;
    DINO_LEFT[24] = 58'h3ffffffc0000000;
    DINO_LEFT[25] = 58'h3ffffffc0000000;
    DINO_LEFT[26] = 58'h3ffffffc0000000;
    DINO_LEFT[27] = 58'h0ffffffc0000000;
    DINO_LEFT[28] = 58'h0ffffff00000000;
    DINO_LEFT[29] = 58'h03fffff00000000;
    DINO_LEFT[30] = 58'h03fffff00000000;
    DINO_LEFT[31] = 58'h00ffffc00000000;
    DINO_LEFT[32] = 58'h00ffffc00000000;
    DINO_LEFT[33] = 58'h003fff000000000;
    DINO_LEFT[34] = 58'h003fff000000000;
    DINO_LEFT[35] = 58'h000f0f000000000;
    DINO_LEFT[36] = 58'h000f0f000000000;
    DINO_LEFT[37] = 58'h0003c3000000000;
    DINO_LEFT[38] = 58'h0003c3000000000;
    DINO_LEFT[39] = 58'h000003000000000;
    DINO_LEFT[40] = 58'h000003000000000;
    DINO_LEFT[41] = 58'h000003c00000000;
    DINO_LEFT[42] = 58'h000003c00000000;
  end
  assign _28_ = DINO_LEFT[rom_y[5:0]];
  reg [57:0] DINO_RIGHT [42:0];
  initial begin
    DINO_RIGHT[0] = 58'h000000ffff00000;
    DINO_RIGHT[1] = 58'h000000ffff00000;
    DINO_RIGHT[2] = 58'h000003ffffc0000;
    DINO_RIGHT[3] = 58'h000003cfffc0000;
    DINO_RIGHT[4] = 58'h000003cfffc0000;
    DINO_RIGHT[5] = 58'h000003ffffc0000;
    DINO_RIGHT[6] = 58'h000003ffffc0000;
    DINO_RIGHT[7] = 58'h000003ffffc0000;
    DINO_RIGHT[8] = 58'h000003ffffc0000;
    DINO_RIGHT[9] = 58'h000003ffffc0000;
    DINO_RIGHT[10] = 58'h000003ffffc0000;
    DINO_RIGHT[11] = 58'h000003ff0000000;
    DINO_RIGHT[12] = 58'h000003ff0000000;
    DINO_RIGHT[13] = 58'h000003fffc00000;
    DINO_RIGHT[14] = 58'h000003fffc00000;
    DINO_RIGHT[15] = 58'h30000ffc0000000;
    DINO_RIGHT[16] = 58'h30000ffc0000000;
    DINO_RIGHT[17] = 58'h30007ffc0000000;
    DINO_RIGHT[18] = 58'h30007ffc0000000;
    DINO_RIGHT[19] = 58'h3c03ffffc000000;
    DINO_RIGHT[20] = 58'h3c03ffffc000000;
    DINO_RIGHT[21] = 58'h3f0ffffcc000000;
    DINO_RIGHT[22] = 58'h3f0ffffcc000000;
    DINO_RIGHT[23] = 58'h3ffffffc0000000;
    DINO_RIGHT[24] = 58'h3ffffffc0000000;
    DINO_RIGHT[25] = 58'h3ffffffc0000000;
    DINO_RIGHT[26] = 58'h3ffffffc0000000;
    DINO_RIGHT[27] = 58'h0ffffffc0000000;
    DINO_RIGHT[28] = 58'h0ffffff00000000;
    DINO_RIGHT[29] = 58'h03fffff00000000;
    DINO_RIGHT[30] = 58'h03fffff00000000;
    DINO_RIGHT[31] = 58'h00ffffc00000000;
    DINO_RIGHT[32] = 58'h00ffffc00000000;
    DINO_RIGHT[33] = 58'h003fff000000000;
    DINO_RIGHT[34] = 58'h003fff000000000;
    DINO_RIGHT[35] = 58'h000fc3e00000000;
    DINO_RIGHT[36] = 58'h000fc3e00000000;
    DINO_RIGHT[37] = 58'h000f00000000000;
    DINO_RIGHT[38] = 58'h000f00000000000;
    DINO_RIGHT[39] = 58'h000c00000000000;
    DINO_RIGHT[40] = 58'h000c00000000000;
    DINO_RIGHT[41] = 58'h000f00000000000;
    DINO_RIGHT[42] = 58'h000f00000000000;
  end
  assign _29_ = DINO_RIGHT[rom_y[5:0]];
  reg [57:0] DINO_STANDING [42:0];
  initial begin
    DINO_STANDING[0] = 58'h000000ffff00000;
    DINO_STANDING[1] = 58'h000000ffff00000;
    DINO_STANDING[2] = 58'h000003ffffc0000;
    DINO_STANDING[3] = 58'h000003cfffc0000;
    DINO_STANDING[4] = 58'h000003cfffc0000;
    DINO_STANDING[5] = 58'h000003ffffc0000;
    DINO_STANDING[6] = 58'h000003ffffc0000;
    DINO_STANDING[7] = 58'h000003ffffc0000;
    DINO_STANDING[8] = 58'h000003ffffc0000;
    DINO_STANDING[9] = 58'h000003ffffc0000;
    DINO_STANDING[10] = 58'h000003ffffc0000;
    DINO_STANDING[11] = 58'h000003ff0000000;
    DINO_STANDING[12] = 58'h000003ff0000000;
    DINO_STANDING[13] = 58'h000003fffc00000;
    DINO_STANDING[14] = 58'h000003fffc00000;
    DINO_STANDING[15] = 58'h30000ffc0000000;
    DINO_STANDING[16] = 58'h30000ffc0000000;
    DINO_STANDING[17] = 58'h30007ffc0000000;
    DINO_STANDING[18] = 58'h30007ffc0000000;
    DINO_STANDING[19] = 58'h3c03ffffc000000;
    DINO_STANDING[20] = 58'h3c03ffffc000000;
    DINO_STANDING[21] = 58'h3f0ffffcc000000;
    DINO_STANDING[22] = 58'h3f0ffffcc000000;
    DINO_STANDING[23] = 58'h3ffffffc0000000;
    DINO_STANDING[24] = 58'h3ffffffc0000000;
    DINO_STANDING[25] = 58'h3ffffffc0000000;
    DINO_STANDING[26] = 58'h3ffffffc0000000;
    DINO_STANDING[27] = 58'h0ffffffc0000000;
    DINO_STANDING[28] = 58'h0ffffff00000000;
    DINO_STANDING[29] = 58'h03fffff00000000;
    DINO_STANDING[30] = 58'h03fffff00000000;
    DINO_STANDING[31] = 58'h00ffffc00000000;
    DINO_STANDING[32] = 58'h00ffffc00000000;
    DINO_STANDING[33] = 58'h003fff000000000;
    DINO_STANDING[34] = 58'h003fff000000000;
    DINO_STANDING[35] = 58'h000fcf000000000;
    DINO_STANDING[36] = 58'h000fcf000000000;
    DINO_STANDING[37] = 58'h000f03000000000;
    DINO_STANDING[38] = 58'h000f03000000000;
    DINO_STANDING[39] = 58'h000c03000000000;
    DINO_STANDING[40] = 58'h000c03000000000;
    DINO_STANDING[41] = 58'h000f03c00000000;
    DINO_STANDING[42] = 58'h000f03c00000000;
  end
  assign _30_ = DINO_STANDING[rom_y[5:0]];
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd8)
  ) _39_ (
    .A(dino_step_counter_q),
    .B(1'h1),
    .Y(_08_)
  );
  \$add  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd11)
  ) _40_ (
    .A(dino_yp_q),
    .B(_01_),
    .Y(_09_)
  );
  \$add  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd11)
  ) _41_ (
    .A(_01_),
    .B({ 1'h0, _38_[1:0] }),
    .Y(_10_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd12)
  ) _42_ (
    .A(dino_yp_q),
    .B(6'h2b),
    .Y(_11_[11:0])
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(1'h0),
    .WIDTH(32'd1)
  ) dino_left_q_reg /* _43_ */ (
    .CLK(clk_i),
    .D(_22_),
    .EN(_12_),
    .Q(dino_left_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(8'h00),
    .WIDTH(32'd8)
  ) _44_ (
    .CLK(clk_i),
    .D(dino_step_counter_d),
    .EN(next_frame_i),
    .Q(dino_step_counter_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(11'h000),
    .WIDTH(32'd11)
  ) _45_ (
    .CLK(clk_i),
    .D(_03_),
    .EN(_13_),
    .Q(dino_yv_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(11'h165),
    .WIDTH(32'd11)
  ) _46_ (
    .CLK(clk_i),
    .D(_00_),
    .EN(_13_),
    .Q(dino_yp_q),
    .SRST(rst_ni)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _47_ (
    .A(hit_i),
    .Y(_14_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _48_ (
    .A({ _17_, next_frame_i }),
    .Y(_12_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _49_ (
    .A({ _14_, next_frame_i }),
    .Y(_13_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _50_ (
    .A(dino_step_counter_q),
    .B(2'h3),
    .Y(_17_)
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _51_ (
    .A(dino_yp_q),
    .B(10'h165),
    .Y(grounded)
  );
  \$ge  #(
    .A_SIGNED(32'd1),
    .A_WIDTH(32'd11),
    .B_SIGNED(32'd1),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _52_ (
    .A(_09_),
    .B(10'h165),
    .Y(_18_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) _53_ (
    .A(pixel_x_i),
    .B(7'h50),
    .Y(_19_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd1)
  ) _54_ (
    .A(pixel_y_i),
    .B(dino_yp_q),
    .Y(_20_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _55_ (
    .A(grounded),
    .B(up_i),
    .Y(_21_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _56_ (
    .A(_19_),
    .B(_23_),
    .Y(pixel_x_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _57_ (
    .A(_20_),
    .B(_24_),
    .Y(pixel_y_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _58_ (
    .A(pixel_x_in_range),
    .B(pixel_y_in_range),
    .Y(pixel_in_range)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _59_ (
    .A(dino_left_q),
    .Y(_22_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) _60_ (
    .A(pixel_x_i),
    .B(8'h8a),
    .Y(_23_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd12),
    .Y_WIDTH(32'd1)
  ) _61_ (
    .A(pixel_y_i),
    .B(_11_[11:0]),
    .Y(_24_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _62_ (
    .A(_04_),
    .B(_32_),
    .S(hit_i),
    .Y(_02_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _63_ (
    .A(1'h0),
    .B(_02_),
    .S(pixel_in_range),
    .Y(pixel_o)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _64_ (
    .A(_10_),
    .B(11'h000),
    .S(_18_),
    .Y(_03_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _65_ (
    .A(_09_),
    .B(11'h165),
    .S(_18_),
    .Y(_00_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _66_ (
    .A(dino_yv_q),
    .B(11'h7ef),
    .S(_21_),
    .Y(_31_)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _67_ (
    .A(_31_),
    .B(11'hxxx),
    .S(hit_i),
    .Y(_01_)
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _68_ (
    .A(_08_),
    .B(8'h00),
    .S(_17_),
    .Y(dino_step_counter_d)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _69_ (
    .A(_37_),
    .B(_36_),
    .S(dino_left_q),
    .Y(_07_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _70_ (
    .A(_35_),
    .B(_34_),
    .S(dino_left_q),
    .Y(_06_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _71_ (
    .A(_07_),
    .B(_06_),
    .S(down_i),
    .Y(_05_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _72_ (
    .A(_33_),
    .B(_05_),
    .S(grounded),
    .Y(_04_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _73_ (
    .A(_27_),
    .B(rom_x),
    .Y(_32_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _74_ (
    .A(_30_),
    .B(rom_x),
    .Y(_33_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _75_ (
    .A(_25_),
    .B(rom_x),
    .Y(_34_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _76_ (
    .A(_26_),
    .B(rom_x),
    .Y(_35_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _77_ (
    .A(_28_),
    .B(rom_x),
    .Y(_36_)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd58),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _78_ (
    .A(_29_),
    .B(rom_x),
    .Y(_37_)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd11)
  ) _79_ (
    .A(pixel_x_i),
    .B(7'h50),
    .Y({ _15_[31], _15_[9:0] })
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd10)
  ) _80_ (
    .A(6'h39),
    .B(_15_[9:0]),
    .Y(rom_x)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd11),
    .Y_WIDTH(32'd12)
  ) _81_ (
    .A(pixel_y_i),
    .B(dino_yp_q),
    .Y({ _16_[31], _16_[10], rom_y })
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _82_ (
    .A(2'h1),
    .B(2'h3),
    .S(down_i),
    .Y(_38_[1:0])
  );
  assign _11_[31:12] = 20'h00000;
  assign _15_[30:10] = { _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31], _15_[31] };
  assign _16_[9:0] = rom_y;
  assign _16_[30:11] = { _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31], _16_[31] };
  assign _38_[31:2] = 30'h00000000;
  assign _sv2v_0 = 1'h0;
endmodule

module dinorun(clk_25_175_i, rst_ni, start_i, up_i, down_i, digit0_en_o, digit0_o, digit1_en_o, digit1_o, digit2_en_o, digit2_o, digit3_en_o, digit3_o, vga_red_o, vga_green_o, vga_blue_o, vga_hsync_o, vga_vsync_o);
  wire [5:0] _000_;
  wire _001_;
  wire [1:0] _002_;
  wire [3:0] _003_;
  wire [7:0] _004_;
  wire _005_;
  wire [1:0] _006_;
  wire [3:0] _007_;
  wire [3:0] _008_;
  wire [3:0] _009_;
  wire [1:0] _010_;
  wire [3:0] _011_;
  wire [3:0] _012_;
  wire [3:0] _013_;
  wire [1:0] _014_;
  wire [3:0] _015_;
  wire [3:0] _016_;
  wire [2:0] _017_;
  wire [1:0] _018_;
  wire [1:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire [31:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _sv2v_0;
  input clk_25_175_i;
  wire clk_25_175_i;
  wire collision;
  output digit0_en_o;
  wire digit0_en_o;
  output [3:0] digit0_o;
  wire [3:0] digit0_o;
  output digit1_en_o;
  wire digit1_en_o;
  output [3:0] digit1_o;
  wire [3:0] digit1_o;
  output digit2_en_o;
  wire digit2_en_o;
  output [3:0] digit2_o;
  wire [3:0] digit2_o;
  output digit3_en_o;
  wire digit3_en_o;
  output [3:0] digit3_o;
  wire [3:0] digit3_o;
  wire dino_enable;
  input down_i;
  wire down_i;
  wire drawing_bird;
  wire drawing_cactus;
  wire drawing_cactus0;
  wire drawing_cactus1;
  wire drawing_dino;
  wire drawing_title;
  wire [7:0] flashing_timer_d;
  wire [7:0] flashing_timer_q;
  wire hit;
  wire [15:0] lfsr16_rand;
  wire next_frame;
  wire [9:0] pixel_x;
  wire [8:0] pixel_y;
  wire reset_objects_n;
  input rst_ni;
  wire rst_ni;
  wire score_enable;
  wire spawn_bird;
  wire spawn_cactus0;
  wire spawn_cactus1;
  input start_i;
  wire start_i;
  wire [1:0] state_d;
  wire [1:0] state_q;
  input up_i;
  wire up_i;
  output [3:0] vga_blue_o;
  wire [3:0] vga_blue_o;
  wire [3:0] vga_blue_q;
  output [3:0] vga_green_o;
  wire [3:0] vga_green_o;
  wire [3:0] vga_green_q;
  wire vga_hsync_d;
  output vga_hsync_o;
  wire vga_hsync_o;
  wire vga_hsync_q;
  output [3:0] vga_red_o;
  wire [3:0] vga_red_o;
  wire [3:0] vga_red_q;
  wire vga_visible_d;
  wire vga_visible_q;
  wire vga_vsync_d;
  output vga_vsync_o;
  wire vga_vsync_o;
  wire vga_vsync_q;
  wire vsync_edge;
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(8'h00),
    .WIDTH(32'd8)
  ) _047_ (
    .CLK(clk_25_175_i),
    .D(flashing_timer_d),
    .EN(_020_),
    .Q(flashing_timer_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(2'h0),
    .WIDTH(32'd2)
  ) _048_ (
    .CLK(clk_25_175_i),
    .D(state_d),
    .EN(_025_),
    .Q(state_q),
    .SRST(rst_ni)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(3'h0),
    .WIDTH(32'd3)
  ) _049_ (
    .CLK(clk_25_175_i),
    .D(_008_[2:0]),
    .Q(vga_green_q[2:0]),
    .SRST(_026_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(1'h0),
    .WIDTH(32'd1)
  ) \vga_green_q_reg[3]  /* _050_ */ (
    .CLK(clk_25_175_i),
    .D(_012_[3]),
    .Q(vga_green_q[3]),
    .SRST(_027_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(4'hf),
    .WIDTH(32'd4)
  ) _051_ (
    .CLK(clk_25_175_i),
    .D(_007_),
    .Q(vga_blue_q),
    .SRST(_026_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(1'h0),
    .WIDTH(32'd1)
  ) \vga_red_q_reg[2]  /* _052_ */ (
    .CLK(clk_25_175_i),
    .D(_017_[2]),
    .Q(vga_red_q[2]),
    .SRST(_028_)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(3'h7),
    .WIDTH(32'd3)
  ) _053_ (
    .CLK(clk_25_175_i),
    .D({ _003_[3], _003_[1:0] }),
    .Q({ vga_red_q[3], vga_red_q[1:0] }),
    .SRST(_040_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _054_ (
    .A({ _032_, vsync_edge }),
    .B(2'h2),
    .Y(_020_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _055_ (
    .A({ _044_, _033_, start_i }),
    .B(3'h2),
    .Y(_021_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _056_ (
    .A({ _039_, start_i }),
    .B(2'h2),
    .Y(_022_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _057_ (
    .A({ _038_, _032_, vsync_edge }),
    .B(3'h3),
    .Y(_023_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _058_ (
    .A({ _034_, collision }),
    .B(2'h2),
    .Y(_024_)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _059_ (
    .A({ _023_, _024_, _020_, _021_, _022_ }),
    .Y(_025_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _060_ (
    .A({ _040_, drawing_bird }),
    .Y(_026_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _061_ (
    .A({ _041_, _040_, drawing_bird }),
    .Y(_027_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _062_ (
    .A({ _041_, _040_, drawing_bird, drawing_cactus }),
    .Y(_028_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd3),
    .Y_WIDTH(32'd1)
  ) _063_ (
    .A({ _039_, _034_, _032_ }),
    .Y(_029_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _064_ (
    .A({ _039_, _033_ }),
    .Y(_030_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _065_ (
    .A(state_q),
    .B(2'h2),
    .Y(_032_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _066_ (
    .A(state_q),
    .B(2'h3),
    .Y(_033_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _067_ (
    .A(state_q),
    .B(1'h1),
    .Y(_034_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _068_ (
    .A(lfsr16_rand[12:8]),
    .Y(_035_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd5),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd5),
    .Y_WIDTH(32'd1)
  ) _069_ (
    .A(lfsr16_rand[11:7]),
    .B(5'h1f),
    .Y(_036_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd6),
    .Y_WIDTH(32'd1)
  ) _070_ (
    .A(lfsr16_rand[11:6]),
    .B(6'h2a),
    .Y(_037_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) _071_ (
    .A(_031_[7:0]),
    .Y(_038_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _072_ (
    .A(state_q),
    .Y(_039_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _073_ (
    .A(vsync_edge),
    .B(_042_),
    .Y(next_frame)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _074_ (
    .A(_034_),
    .B(_035_),
    .Y(spawn_cactus0)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _075_ (
    .A(_034_),
    .B(_036_),
    .Y(spawn_cactus1)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _076_ (
    .A(_034_),
    .B(_037_),
    .Y(spawn_bird)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _077_ (
    .A(drawing_dino),
    .B(_043_),
    .Y(collision)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _078_ (
    .A(drawing_title),
    .B(_039_),
    .Y(_040_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _079_ (
    .A(drawing_dino),
    .B(dino_enable),
    .Y(_041_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _080_ (
    .A(next_frame),
    .B(_034_),
    .Y(score_enable)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _081_ (
    .A(hit),
    .Y(_042_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _082_ (
    .A(_032_),
    .B(_033_),
    .Y(hit)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _083_ (
    .A(_046_),
    .B(flashing_timer_q[3]),
    .Y(dino_enable)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _084_ (
    .A(drawing_cactus0),
    .B(drawing_cactus1),
    .Y(drawing_cactus)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _085_ (
    .A(drawing_cactus),
    .B(drawing_bird),
    .Y(_043_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _086_ (
    .A(down_i),
    .B(up_i),
    .Y(_044_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) _087_ (
    .A(pixel_y),
    .B(9'h18c),
    .Y(_045_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _088_ (
    .A(state_q),
    .B(2'h2),
    .Y(_046_)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) vga_visible_q_reg /* _089_ */ (
    .CLK(clk_25_175_i),
    .D(vga_visible_d),
    .Q(vga_visible_q)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) vga_hsync_q_reg /* _090_ */ (
    .CLK(clk_25_175_i),
    .D(vga_hsync_d),
    .Q(vga_hsync_q)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) vga_vsync_q_reg /* _091_ */ (
    .CLK(clk_25_175_i),
    .D(vga_vsync_d),
    .Q(vga_vsync_q)
  );
  \$mux  #(
    .WIDTH(32'd11)
  ) _092_ (
    .A(11'h131),
    .B(11'h7b5),
    .S(_045_),
    .Y({ _017_, _016_, _015_ })
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _093_ (
    .A(_016_),
    .B(4'hf),
    .S(drawing_cactus),
    .Y(_012_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _094_ (
    .A(_015_),
    .B(4'h0),
    .S(drawing_cactus),
    .Y(_011_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _095_ (
    .A({ 1'h1, _017_ }),
    .B(4'h0),
    .S(drawing_cactus),
    .Y(_013_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _096_ (
    .A(_012_),
    .B(4'h7),
    .S(_041_),
    .Y(_008_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _097_ (
    .A(_011_),
    .B(4'h0),
    .S(_041_),
    .Y(_007_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _098_ (
    .A(_013_),
    .B(4'h0),
    .S(_041_),
    .Y(_009_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _099_ (
    .A(_009_),
    .B(4'h0),
    .S(drawing_bird),
    .Y(_003_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _100_ (
    .A(rst_ni),
    .B(1'h0),
    .S(_044_),
    .Y(_005_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _101_ (
    .A(2'hx),
    .B(2'h0),
    .S(_044_),
    .Y(_019_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _102_ (
    .A(_005_),
    .B(1'h0),
    .S(start_i),
    .Y(_001_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _103_ (
    .A(_019_),
    .B(2'h1),
    .S(start_i),
    .Y(_018_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _104_ (
    .A(2'hx),
    .B(2'h3),
    .S(_038_),
    .Y(_014_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _105_ (
    .A(2'hx),
    .B(_014_),
    .S(vsync_edge),
    .Y(_010_)
  );
  \$mux  #(
    .WIDTH(32'd8)
  ) _106_ (
    .A(8'hxx),
    .B(_031_[7:0]),
    .S(vsync_edge),
    .Y(_004_)
  );
  \$mux  #(
    .WIDTH(32'd6)
  ) _107_ (
    .A(6'h00),
    .B(6'h3c),
    .S(collision),
    .Y(_000_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _108_ (
    .A(2'hx),
    .B(2'h2),
    .S(collision),
    .Y(_006_)
  );
  \$mux  #(
    .WIDTH(32'd2)
  ) _109_ (
    .A(2'hx),
    .B(2'h1),
    .S(start_i),
    .Y(_002_)
  );
  \$pmux  #(
    .S_WIDTH(32'd4),
    .WIDTH(32'd2)
  ) _110_ (
    .A(2'hx),
    .B({ _002_, _006_, _010_, _018_ }),
    .S({ _039_, _034_, _032_, _033_ }),
    .Y(state_d)
  );
  \$pmux  #(
    .S_WIDTH(32'd2),
    .WIDTH(32'd1)
  ) _111_ (
    .A(1'hx),
    .B({ rst_ni, _001_ }),
    .S({ _029_, _033_ }),
    .Y(reset_objects_n)
  );
  \$pmux  #(
    .S_WIDTH(32'd3),
    .WIDTH(32'd8)
  ) _112_ (
    .A(8'hxx),
    .B({ 2'h0, _000_, _004_, 8'h00 }),
    .S({ _034_, _032_, _030_ }),
    .Y(flashing_timer_d)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd8),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd8)
  ) _113_ (
    .A(flashing_timer_q),
    .B(1'h1),
    .Y(_031_[7:0])
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _114_ (
    .A(4'h0),
    .B(vga_red_q),
    .S(vga_visible_q),
    .Y(vga_red_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _115_ (
    .A(4'h0),
    .B(vga_green_q),
    .S(vga_visible_q),
    .Y(vga_green_o)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _116_ (
    .A(4'h0),
    .B(vga_blue_q),
    .S(vga_visible_q),
    .Y(vga_blue_o)
  );
  bird bird (
    .clk_i(clk_25_175_i),
    .next_frame_i(next_frame),
    .pixel_o(drawing_bird),
    .pixel_x_i(pixel_x),
    .pixel_y_i({ 1'h0, pixel_y }),
    .rand_i(lfsr16_rand[1:0]),
    .rst_ni(reset_objects_n),
    .spawn_i(spawn_bird)
  );
  cactus cactus0 (
    .clk_i(clk_25_175_i),
    .next_frame_i(next_frame),
    .pixel_o(drawing_cactus0),
    .pixel_x_i(pixel_x),
    .pixel_y_i({ 1'h0, pixel_y }),
    .rand_i(lfsr16_rand[1:0]),
    .rst_ni(reset_objects_n),
    .spawn_i(spawn_cactus0)
  );
  cactus cactus1 (
    .clk_i(clk_25_175_i),
    .next_frame_i(next_frame),
    .pixel_o(drawing_cactus1),
    .pixel_x_i(pixel_x),
    .pixel_y_i({ 1'h0, pixel_y }),
    .rand_i(lfsr16_rand[1:0]),
    .rst_ni(reset_objects_n),
    .spawn_i(spawn_cactus1)
  );
  dino dino (
    .clk_i(clk_25_175_i),
    .down_i(down_i),
    .hit_i(hit),
    .next_frame_i(next_frame),
    .pixel_o(drawing_dino),
    .pixel_x_i(pixel_x),
    .pixel_y_i({ 1'h0, pixel_y }),
    .rst_ni(rst_ni),
    .up_i(up_i)
  );
  edge_detector edge_detector (
    .clk_i(clk_25_175_i),
    .data_i(vga_vsync_q),
    .edge_o(vsync_edge)
  );
  lfsr16 lfsr16 (
    .clk_i(clk_25_175_i),
    .next_i(next_frame),
    .rand_o(lfsr16_rand),
    .rst_ni(rst_ni)
  );
  score_counter score_counter (
    .clk_i(clk_25_175_i),
    .digit0_o(digit0_o),
    .digit1_o(digit1_o),
    .digit2_o(digit2_o),
    .digit3_o(digit3_o),
    .en_i(score_enable),
    .rst_ni(reset_objects_n)
  );
  title title (
    .pixel_o(drawing_title),
    .pixel_x_i(pixel_x),
    .pixel_y_i({ 1'h0, pixel_y })
  );
  vga_timer vga_timer (
    .clk_i(clk_25_175_i),
    .hsync_o(vga_hsync_d),
    .position_x_o(pixel_x),
    .position_y_o(pixel_y),
    .rst_ni(rst_ni),
    .visible_o(vga_visible_d),
    .vsync_o(vga_vsync_d)
  );
  assign _sv2v_0 = 1'h0;
  assign digit0_en_o = 1'h1;
  assign digit1_en_o = 1'h1;
  assign digit2_en_o = 1'h1;
  assign digit3_en_o = 1'h1;
  assign vga_hsync_o = vga_hsync_q;
  assign vga_vsync_o = vga_vsync_q;
endmodule

module edge_detector(clk_i, data_i, edge_o);
  wire _0_;
  input clk_i;
  wire clk_i;
  wire data_d;
  input data_i;
  wire data_i;
  wire data_q1;
  wire data_q2;
  output edge_o;
  wire edge_o;
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _1_ (
    .A(data_q1),
    .B(_0_),
    .Y(edge_o)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _2_ (
    .A(data_q2),
    .Y(_0_)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) data_q1_reg /* _3_ */ (
    .CLK(clk_i),
    .D(data_i),
    .Q(data_q1)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) data_q2_reg /* _4_ */ (
    .CLK(clk_i),
    .D(data_q1),
    .Q(data_q2)
  );
  assign data_d = data_i;
endmodule

module hex7seg(d3, d2, d1, d0, A, B, C, D, E, F, G);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  output A;
  wire A;
  output B;
  wire B;
  output C;
  wire C;
  output D;
  wire D;
  output E;
  wire E;
  output F;
  wire F;
  output G;
  wire G;
  input d0;
  wire d0;
  input d1;
  wire d1;
  input d2;
  wire d2;
  input d3;
  wire d3;
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _061_ (
    .A(_003_),
    .B(_033_),
    .Y(_004_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _062_ (
    .A(_004_),
    .B(_034_),
    .Y(_005_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _063_ (
    .A(d3),
    .B(d2),
    .Y(_009_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _064_ (
    .A(_004_),
    .B(d0),
    .Y(_012_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _065_ (
    .A(_013_),
    .B(_034_),
    .Y(_014_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _066_ (
    .A(d3),
    .B(_032_),
    .Y(_006_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _067_ (
    .A(_006_),
    .B(d1),
    .Y(_007_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _068_ (
    .A(_007_),
    .B(d0),
    .Y(_008_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _069_ (
    .A(_009_),
    .B(d1),
    .Y(_016_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _070_ (
    .A(_016_),
    .B(_034_),
    .Y(_017_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _071_ (
    .A(_016_),
    .B(d0),
    .Y(_018_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _072_ (
    .A(d3),
    .B(_029_),
    .Y(_022_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _073_ (
    .A(_022_),
    .B(d1),
    .Y(_023_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _074_ (
    .A(_023_),
    .B(_030_),
    .Y(_024_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _075_ (
    .A(_006_),
    .B(_033_),
    .Y(_026_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _076_ (
    .A(_026_),
    .B(d0),
    .Y(_027_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _077_ (
    .A(_031_),
    .B(_032_),
    .Y(_000_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _078_ (
    .A(_000_),
    .B(_033_),
    .Y(_001_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _079_ (
    .A(_001_),
    .B(d0),
    .Y(_002_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _080_ (
    .A(_000_),
    .B(d1),
    .Y(_019_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _081_ (
    .A(_019_),
    .B(_034_),
    .Y(_020_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _082_ (
    .A(_019_),
    .B(d0),
    .Y(_025_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _083_ (
    .A(_031_),
    .B(d2),
    .Y(_003_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _084_ (
    .A(_003_),
    .B(d1),
    .Y(_013_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _085_ (
    .A(_013_),
    .B(d0),
    .Y(_021_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _086_ (
    .A(_009_),
    .B(_033_),
    .Y(_010_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _087_ (
    .A(_010_),
    .B(d0),
    .Y(_011_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _088_ (
    .A(_001_),
    .B(_034_),
    .Y(_028_)
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _089_ (
    .A(_010_),
    .B(_034_),
    .Y(_015_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _090_ (
    .A(_037_),
    .Y(A)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _091_ (
    .A(_042_),
    .Y(B)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _092_ (
    .A(_045_),
    .Y(C)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _093_ (
    .A(d2),
    .Y(_029_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _094_ (
    .A(d0),
    .Y(_030_)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _095_ (
    .A(_048_),
    .Y(D)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _096_ (
    .A(_053_),
    .Y(E)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _097_ (
    .A(_057_),
    .Y(F)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _098_ (
    .A(_060_),
    .Y(G)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _099_ (
    .A(d3),
    .Y(_031_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _100_ (
    .A(d2),
    .Y(_032_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _101_ (
    .A(d1),
    .Y(_033_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _102_ (
    .A(d0),
    .Y(_034_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _103_ (
    .A(_002_),
    .B(_005_),
    .Y(_035_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _104_ (
    .A(_035_),
    .B(_008_),
    .Y(_036_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _105_ (
    .A(_036_),
    .B(_011_),
    .Y(_037_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _106_ (
    .A(_012_),
    .B(_014_),
    .Y(_038_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _107_ (
    .A(_038_),
    .B(_008_),
    .Y(_039_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _108_ (
    .A(_039_),
    .B(_015_),
    .Y(_040_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _109_ (
    .A(_040_),
    .B(_017_),
    .Y(_041_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _110_ (
    .A(_041_),
    .B(_018_),
    .Y(_042_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _111_ (
    .A(_020_),
    .B(_015_),
    .Y(_043_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _112_ (
    .A(_043_),
    .B(_017_),
    .Y(_044_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _113_ (
    .A(_044_),
    .B(_018_),
    .Y(_045_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _114_ (
    .A(_035_),
    .B(_021_),
    .Y(_046_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _115_ (
    .A(_046_),
    .B(_024_),
    .Y(_047_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _116_ (
    .A(_047_),
    .B(_018_),
    .Y(_048_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _117_ (
    .A(_002_),
    .B(_025_),
    .Y(_049_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _118_ (
    .A(_049_),
    .B(_005_),
    .Y(_050_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _119_ (
    .A(_050_),
    .B(_012_),
    .Y(_051_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _120_ (
    .A(_051_),
    .B(_021_),
    .Y(_052_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _121_ (
    .A(_052_),
    .B(_027_),
    .Y(_053_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _122_ (
    .A(_002_),
    .B(_020_),
    .Y(_054_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _123_ (
    .A(_054_),
    .B(_025_),
    .Y(_055_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _124_ (
    .A(_055_),
    .B(_021_),
    .Y(_056_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _125_ (
    .A(_056_),
    .B(_011_),
    .Y(_057_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _126_ (
    .A(_028_),
    .B(_002_),
    .Y(_058_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _127_ (
    .A(_058_),
    .B(_021_),
    .Y(_059_)
  );
  \$or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _128_ (
    .A(_059_),
    .B(_015_),
    .Y(_060_)
  );
endmodule

module lfsr16(clk_i, rst_ni, next_i, rand_o);
  input clk_i;
  wire clk_i;
  input next_i;
  wire next_i;
  wire [15:0] rand_d;
  output [15:0] rand_o;
  wire [15:0] rand_o;
  wire [15:0] rand_q;
  input rst_ni;
  wire rst_ni;
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(16'h0001),
    .WIDTH(32'd16)
  ) _0_ (
    .CLK(clk_i),
    .D({ rand_q[14:0], rand_d[0] }),
    .EN(next_i),
    .Q(rand_q),
    .SRST(rst_ni)
  );
  \$reduce_xor  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd16),
    .Y_WIDTH(32'd1)
  ) _1_ (
    .A({ rand_q[15:14], 1'h0, rand_q[12], 8'h00, rand_q[3], 3'h0 }),
    .Y(rand_d[0])
  );
  assign rand_d[15:1] = rand_q[14:0];
  assign rand_o = rand_q;
endmodule

module score_counter(clk_i, rst_ni, en_i, digit0_o, digit1_o, digit2_o, digit3_o);
  wire [3:0] _00_;
  wire [3:0] _01_;
  wire [3:0] _02_;
  wire [31:0] _03_;
  wire [3:0] _04_;
  wire [31:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _sv2v_0;
  input clk_i;
  wire clk_i;
  wire [3:0] digit0_d;
  output [3:0] digit0_o;
  wire [3:0] digit0_o;
  wire [3:0] digit0_q;
  wire [3:0] digit1_d;
  output [3:0] digit1_o;
  wire [3:0] digit1_o;
  wire [3:0] digit1_q;
  wire [3:0] digit2_d;
  output [3:0] digit2_o;
  wire [3:0] digit2_o;
  wire [3:0] digit2_q;
  output [3:0] digit3_o;
  wire [3:0] digit3_o;
  wire [3:0] digit3_q;
  input en_i;
  wire en_i;
  input rst_ni;
  wire rst_ni;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) _10_ (
    .A(digit0_q),
    .B(1'h1),
    .Y(_02_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) _11_ (
    .A(digit1_q),
    .B(1'h1),
    .Y(_03_[3:0])
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) _12_ (
    .A(digit2_q),
    .B(1'h1),
    .Y(_04_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd4)
  ) _13_ (
    .A(digit3_q),
    .B(1'h1),
    .Y(_05_[3:0])
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(4'h0),
    .WIDTH(32'd4)
  ) _14_ (
    .CLK(clk_i),
    .D(_05_[3:0]),
    .EN(_06_),
    .Q(digit3_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(4'h0),
    .WIDTH(32'd4)
  ) _15_ (
    .CLK(clk_i),
    .D(digit2_d),
    .EN(en_i),
    .Q(digit2_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(4'h0),
    .WIDTH(32'd4)
  ) _16_ (
    .CLK(clk_i),
    .D(digit1_d),
    .EN(en_i),
    .Q(digit1_q),
    .SRST(rst_ni)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(4'h0),
    .WIDTH(32'd4)
  ) _17_ (
    .CLK(clk_i),
    .D(digit0_d),
    .EN(en_i),
    .Q(digit0_q),
    .SRST(rst_ni)
  );
  \$reduce_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _18_ (
    .A({ _09_, en_i }),
    .Y(_06_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _19_ (
    .A(_02_),
    .B(4'ha),
    .Y(_07_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _20_ (
    .A(_00_),
    .B(4'ha),
    .Y(_08_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd4),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _21_ (
    .A(_01_),
    .B(4'ha),
    .Y(_09_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _22_ (
    .A(_01_),
    .B(4'h0),
    .S(_09_),
    .Y(digit2_d)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _23_ (
    .A(digit2_q),
    .B(_04_),
    .S(_08_),
    .Y(_01_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _24_ (
    .A(_00_),
    .B(4'h0),
    .S(_08_),
    .Y(digit1_d)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _25_ (
    .A(digit1_q),
    .B(_03_[3:0]),
    .S(_07_),
    .Y(_00_)
  );
  \$mux  #(
    .WIDTH(32'd4)
  ) _26_ (
    .A(_02_),
    .B(4'h0),
    .S(_07_),
    .Y(digit0_d)
  );
  assign _sv2v_0 = 1'h0;
  assign digit0_o = digit0_q;
  assign digit1_o = digit1_q;
  assign digit2_o = digit2_q;
  assign digit3_o = digit3_q;
endmodule

module synchronizer(clk_sample_i, clk_target_i, async_data_i, sync_data_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _sv2v_0;
  input [3:0] async_data_i;
  wire [3:0] async_data_i;
  input clk_sample_i;
  wire clk_sample_i;
  wire clk_target_d;
  wire clk_target_edge;
  input clk_target_i;
  wire clk_target_i;
  wire clk_target_q1;
  wire clk_target_q2;
  wire [31:0] \sv2v_autoblock_1.i ;
  output [3:0] sync_data_o;
  wire [3:0] sync_data_o;
  wire [3:0] sync_data_q;
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[0]  /* _05_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[0]),
    .EN(_01_),
    .Q(sync_data_q[0])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[1]  /* _06_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[1]),
    .EN(_02_),
    .Q(sync_data_q[1])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[2]  /* _07_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[2]),
    .EN(_03_),
    .Q(sync_data_q[2])
  );
  \$dffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd1),
    .WIDTH(32'd1)
  ) \sync_data_q_reg[3]  /* _08_ */ (
    .CLK(clk_sample_i),
    .D(async_data_i[3]),
    .EN(_04_),
    .Q(sync_data_q[3])
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _09_ (
    .A(clk_target_q1),
    .B(_00_),
    .Y(clk_target_edge)
  );
  \$logic_not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _10_ (
    .A(clk_target_q2),
    .Y(_00_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _11_ (
    .A(clk_target_edge),
    .B(async_data_i[0]),
    .Y(_01_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _12_ (
    .A(clk_target_edge),
    .B(async_data_i[1]),
    .Y(_02_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _13_ (
    .A(clk_target_edge),
    .B(async_data_i[2]),
    .Y(_03_)
  );
  \$logic_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _14_ (
    .A(clk_target_edge),
    .B(async_data_i[3]),
    .Y(_04_)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_target_q1_reg /* _15_ */ (
    .CLK(clk_sample_i),
    .D(clk_target_i),
    .Q(clk_target_q1)
  );
  \$dff  #(
    .CLK_POLARITY(1'h1),
    .WIDTH(32'd1)
  ) clk_target_q2_reg /* _16_ */ (
    .CLK(clk_sample_i),
    .D(clk_target_q1),
    .Q(clk_target_q2)
  );
  assign _sv2v_0 = 1'h0;
  assign clk_target_d = clk_target_i;
  assign \sv2v_autoblock_1.i  = 32'd4;
  assign sync_data_o = sync_data_q;
endmodule

module title(pixel_x_i, pixel_y_i, pixel_o);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [46:0] _06_;
  wire _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire _sv2v_0;
  wire pixel_in_range;
  output pixel_o;
  wire pixel_o;
  input [9:0] pixel_x_i;
  wire [9:0] pixel_x_i;
  wire pixel_x_in_range;
  input [9:0] pixel_y_i;
  wire [9:0] pixel_y_i;
  wire pixel_y_in_range;
  wire [9:0] rom_x;
  wire [9:0] rom_y;
  reg [46:0] TITLE_MEM [6:0];
  initial begin
    TITLE_MEM[0] = 47'h78cf1f078c9e;
    TITLE_MEM[1] = 47'h64cc99064c99;
    TITLE_MEM[2] = 47'h64cc99064c99;
    TITLE_MEM[3] = 47'h64cc99078c99;
    TITLE_MEM[4] = 47'h64cc99064c99;
    TITLE_MEM[5] = 47'h64cc99064c99;
    TITLE_MEM[6] = 47'h78cc9f064f19;
  end
  assign _06_ = TITLE_MEM[rom_y[2:0]];
  \$div  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd32)
  ) _10_ (
    .A({ _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[9:0] }),
    .B(4'hd),
    .Y(_00_)
  );
  \$div  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd32),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd32)
  ) _11_ (
    .A({ _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[9:0] }),
    .B(4'hd),
    .Y({ _01_[31:10], rom_y })
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd1)
  ) _12_ (
    .A(pixel_x_i),
    .B(4'he),
    .Y(_02_)
  );
  \$ge  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd1)
  ) _13_ (
    .A(pixel_y_i),
    .B(7'h46),
    .Y(_03_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _14_ (
    .A(_02_),
    .B(_04_),
    .Y(pixel_x_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _15_ (
    .A(_03_),
    .B(_05_),
    .Y(pixel_y_in_range)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _16_ (
    .A(pixel_x_in_range),
    .B(pixel_y_in_range),
    .Y(pixel_in_range)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _17_ (
    .A(pixel_x_i),
    .B(10'h271),
    .Y(_04_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd8),
    .Y_WIDTH(32'd1)
  ) _18_ (
    .A(pixel_y_i),
    .B(8'ha1),
    .Y(_05_)
  );
  \$mux  #(
    .WIDTH(32'd1)
  ) _19_ (
    .A(1'h0),
    .B(_07_),
    .S(pixel_in_range),
    .Y(pixel_o)
  );
  \$shiftx  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd47),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _20_ (
    .A(_06_),
    .B(rom_x),
    .Y(_07_)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd4),
    .Y_WIDTH(32'd11)
  ) _21_ (
    .A(pixel_x_i),
    .B(4'he),
    .Y({ _08_[31], _08_[9:0] })
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd6),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd10)
  ) _22_ (
    .A(6'h2e),
    .B(_00_[9:0]),
    .Y(rom_x)
  );
  \$sub  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd7),
    .Y_WIDTH(32'd11)
  ) _23_ (
    .A(pixel_y_i),
    .B(7'h46),
    .Y({ _09_[31], _09_[9:0] })
  );
  assign _01_[9:0] = rom_y;
  assign _08_[30:10] = { _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31], _08_[31] };
  assign _09_[30:10] = { _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31], _09_[31] };
  assign _sv2v_0 = 1'h0;
endmodule

module vga_timer(clk_i, rst_ni, hsync_o, vsync_o, visible_o, position_x_o, position_y_o);
  wire [9:0] _00_;
  wire [31:0] _01_;
  wire _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  input clk_i;
  wire clk_i;
  output hsync_o;
  wire hsync_o;
  wire hvisible;
  output [9:0] position_x_o;
  wire [9:0] position_x_o;
  output [8:0] position_y_o;
  wire [8:0] position_y_o;
  input rst_ni;
  wire rst_ni;
  wire [8:0] \sv2v_cast_5F333$func$synth/yosys_common/build/rtl.sv2v.v:415$215.inp ;
  wire [9:0] \sv2v_cast_60BAD$func$synth/yosys_common/build/rtl.sv2v.v:410$214.inp ;
  output visible_o;
  wire visible_o;
  output vsync_o;
  wire vsync_o;
  wire vvisible;
  wire [9:0] x_counter_d;
  wire [9:0] x_counter_q;
  wire [9:0] y_counter_q;
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd10)
  ) _18_ (
    .A(x_counter_q),
    .B(1'h1),
    .Y(_00_)
  );
  \$add  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd10)
  ) _19_ (
    .A(y_counter_q),
    .B(1'h1),
    .Y(_01_[9:0])
  );
  \$and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _20_ (
    .A(hvisible),
    .B(vvisible),
    .Y(visible_o)
  );
  \$sdffe  #(
    .CLK_POLARITY(32'd1),
    .EN_POLARITY(32'd0),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(10'h1ec),
    .WIDTH(32'd10)
  ) _21_ (
    .CLK(clk_i),
    .D(_04_[9:0]),
    .EN(_17_),
    .Q(y_counter_q),
    .SRST(rst_ni)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd0),
    .SRST_VALUE(5'h1f),
    .WIDTH(32'd5)
  ) _22_ (
    .CLK(clk_i),
    .D({ x_counter_d[9], x_counter_d[7:4] }),
    .Q({ x_counter_q[9], x_counter_q[7:4] }),
    .SRST(rst_ni)
  );
  \$sdff  #(
    .CLK_POLARITY(32'd1),
    .SRST_POLARITY(32'd1),
    .SRST_VALUE(5'h00),
    .WIDTH(32'd5)
  ) _23_ (
    .CLK(clk_i),
    .D({ _00_[8], _00_[3:0] }),
    .Q({ x_counter_q[8], x_counter_q[3:0] }),
    .SRST(_02_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _24_ (
    .A(rst_ni),
    .Y(_03_)
  );
  \$reduce_or  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd2),
    .Y_WIDTH(32'd1)
  ) _25_ (
    .A({ _05_, _03_ }),
    .Y(_02_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _26_ (
    .A(x_counter_q),
    .B(10'h31f),
    .Y(_05_)
  );
  \$eq  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _27_ (
    .A(y_counter_q),
    .B(10'h20c),
    .Y(_06_)
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _28_ (
    .A(10'h290),
    .B(x_counter_q),
    .Y(_07_)
  );
  \$le  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd9),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _29_ (
    .A(9'h1ea),
    .B(y_counter_q),
    .Y(_08_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _30_ (
    .A(_13_),
    .B(rst_ni),
    .Y(hvisible)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _31_ (
    .A(_14_),
    .B(rst_ni),
    .Y(vvisible)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _32_ (
    .A(_07_),
    .B(_15_),
    .Y(_09_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _33_ (
    .A(_09_),
    .B(rst_ni),
    .Y(_10_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _34_ (
    .A(_08_),
    .B(_16_),
    .Y(_11_)
  );
  \$logic_and  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _35_ (
    .A(_11_),
    .B(rst_ni),
    .Y(_12_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _36_ (
    .A(x_counter_q),
    .B(10'h280),
    .Y(_13_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) _37_ (
    .A(y_counter_q),
    .B(9'h1e0),
    .Y(_14_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _38_ (
    .A(x_counter_q),
    .B(10'h2f0),
    .Y(_15_)
  );
  \$lt  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd9),
    .Y_WIDTH(32'd1)
  ) _39_ (
    .A(y_counter_q),
    .B(9'h1ec),
    .Y(_16_)
  );
  \$ne  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd10),
    .B_SIGNED(32'd0),
    .B_WIDTH(32'd10),
    .Y_WIDTH(32'd1)
  ) _40_ (
    .A(x_counter_q),
    .B(10'h31f),
    .Y(_17_)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _41_ (
    .A(_10_),
    .Y(hsync_o)
  );
  \$not  #(
    .A_SIGNED(32'd0),
    .A_WIDTH(32'd1),
    .Y_WIDTH(32'd1)
  ) _42_ (
    .A(_12_),
    .Y(vsync_o)
  );
  \$mux  #(
    .WIDTH(32'd10)
  ) _43_ (
    .A(_00_),
    .B(10'h000),
    .S(_05_),
    .Y(x_counter_d)
  );
  \$mux  #(
    .WIDTH(32'd10)
  ) _44_ (
    .A(_01_[9:0]),
    .B(10'h000),
    .S(_06_),
    .Y(_04_[9:0])
  );
  assign _01_[31:11] = 21'h000000;
  assign _04_[31:10] = 22'b000000000000000000000x;
  assign position_x_o = x_counter_q;
  assign position_y_o = y_counter_q[8:0];
  assign \sv2v_cast_5F333$func$synth/yosys_common/build/rtl.sv2v.v:415$215.inp  = 9'hxxx;
  assign \sv2v_cast_60BAD$func$synth/yosys_common/build/rtl.sv2v.v:410$214.inp  = 10'hxxx;
endmodule
